
''' This file estimates the average treatment effects''' 

# standard library
import numpy as np

# project library
import grmReader
import numpy.random 
import grmEstimation

from random import choice 


import ast

#from mpi4py import MPI
#comm = MPI.COMM_WORLD
#size = comm.Get_size()
#rank = comm.Get_rank()


def simulate():
    ''' Simulate data generation process of the Generalized Roy Model.
    
    '''
    
    # Process initFile.
    grmEstimation.estimate()
    initDict = grmReader.read()
    
    rslt2 = {}
    
    with open('grmRslt.json', 'r') as file_:
        rslt = file_.readline()
        rslt2 = ast.literal_eval(rslt)
        

    ''' Distribute parametrization and (limited) type conversions.
    '''
    numAgents  = initDict['numAgents']
    fileName   = 'grmData2'
    
    Y1_beta    = np.array(rslt2['Y1_beta'])
    Y0_beta    = np.array(rslt2['Y0_beta'])
    
    D_gamma    = np.array(rslt2['D_gamma'])
    
    U1_var     = rslt2['U1_var'] 
    U0_var     = rslt2['U0_var'] 
    V_var      = initDict['V_var']
    
    U1V_rho    = rslt2['U1V_rho']  
    U0V_rho    = rslt2['U0V_rho']  
    
    randomSeed = initDict['randomSeed']  
    
    
    ''' Set random seed
    '''
    np.random.seed(randomSeed)
    
    ''' Construct auxiliary objects.
    '''
    
    U1V_cov      = U1V_rho*np.sqrt(U1_var)*np.sqrt(V_var)
    U0V_cov      = U0V_rho*np.sqrt(U0_var)*np.sqrt(V_var)
    
    ''' Simulate observable agent characteristics.
    '''
    
    grmData = np.genfromtxt('grmData.dat', unpack=True)
    grmData = grmData.tolist()
    grmData2 = np.reshape(grmData,(7,numAgents))
    
    
    #if rank == 0:
    simData = np.asarray([choice(grmData2.T) for _ in xrange(numAgents)])
    #elif rank==1:
    #simData = np.asarray([choice(grmData2.T) for _ in xrange(numAgents)])
    #comm.Barrier()
    #simData = comm.gather(simData, root=0)
    X = simData.T[2:5:]
    Z = simData.T[5:7:]
   
     
    ''' Construct level indicators for outcomes and choices. 
    '''
    Y1_level = np.dot(Y1_beta, X)
    Y0_level = np.dot(Y0_beta, X)
    D_level  = np.dot(D_gamma, Z)
    
    
    ''' Simulate unobservables from the model.
    '''
    means = np.tile(0.0, 3)
    vars_ = [U1_var, U0_var, V_var]
    
    covs  = np.diag(vars_)
    
    
    covs[0,2] = U1V_cov 
    
    covs[2,0] = covs[0,2]
    
    covs[1,2] = U0V_cov
    covs[2,1] = covs[1,2]
    
    U = np.random.multivariate_normal(means, covs, numAgents)
    
    ''' Simulate individual outcomes and choices.
    '''
    Y1 = np.tile(np.nan, (numAgents))
    Y0 = np.tile(np.nan, (numAgents))
    Y  = np.tile(np.nan, (numAgents))
    
    D  = np.tile(np.nan, (numAgents))
    
    Effect = np.tile(np.nan, (numAgents))
    EffectTreat = np.tile(np.nan, (numAgents))
    EffectNotTreat = np.tile(np.nan, (numAgents))  
    
    for i in range(numAgents):
        
        # Distribute unobservables.
        U1 = U[i,0]
        U0 = U[i,1]
        V  = U[i,2]
        
        # Decision Rule.
        expectedBenefits = Y1_level[i] - Y0_level[i]
        cost             = D_level[i]  + V 
        
        D[i] = np.float((expectedBenefits - cost > 0))
        
        # Potential outcomes.
        Y1[i] = Y1_level[i] + U1
        Y0[i] = Y0_level[i] + U0
        
        # Observed outcomes.
        Y[i]  = D[i]*Y1[i] + (1.0 - D[i])*Y0[i]
        
        # Effect 
        Effect[i] = Y1[i] - Y0[i]
        EffectTreat[i] = D[i]*(Y1[i] - Y0[i])
        EffectNotTreat[i] = (1-D[i])*(Y1[i] - Y0[i])
        
    
    TreatPop = sum(D)
    NotTreatPop = numAgents-TreatPop
    ATE = sum(Effect)/numAgents
    TT = sum(EffectTreat)/TreatPop
    UT = sum(EffectNotTreat)/NotTreatPop
    print 'Average Treatment Effect', ("{0:.15f}".format(ATE))
    print 'Average Treatment Effect on the Treated', ("{0:.15f}".format(TT))
    print 'Average Effect on the Untreated', ("{0:.15f}".format(UT))
   
   
    ''' Check quality of simulated sample. 
    '''
    
    assert (np.all(np.isfinite(Y1)))
    assert (np.all(np.isfinite(Y0)))
    
    assert (np.all(np.isfinite(Y)))
    assert (np.all(np.isfinite(D)))
    
    assert (Y1.shape == (numAgents, ))
    assert (Y0.shape == (numAgents, ))
    
    assert (Y.shape  == (numAgents, ))
    assert (D.shape  == (numAgents, ))
    
    assert (Y1.dtype == 'float')
    assert (Y0.dtype == 'float')
    
    assert (Y.dtype == 'float')
    assert (D.dtype == 'float')
    
    assert ((D.all() in [1.0, 0.0]))
       
    
    
''' Executable.
'''
if __name__ == '__main__':
    
    simulate()

